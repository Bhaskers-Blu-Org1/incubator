var request = require('request');

function main(params) {
  if (params.action == "created" && params.sender.id == 34746072) {

    _url = "https://" + params.gitUsername + ":" + params.gitPersonalToken + "@api.github.com/repos/IBM/" + params.repository.name + "/contents/README.md";
    
    options = {
      url: _url,
      method: "PUT",
      headers: {
        'User-agent': 'curl/7.54.0',
        'content-type': 'application/json',
        'Accept': 'application/vnd.github.inertia-preview+json'
      },
      body: JSON.stringify({message: "Add README template", content: ""})
    }      
     
    return new Promise(function(resolve, reject) {
      setTimeout(function() {
        request(options, function(error, response, body) {
          if (error) {
            reject(error);
          }
          else {
            resolve({msg: response});
          }
        });
      }, 7000);
    });
  }
}
